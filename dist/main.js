(()=>{var e={427:e=>{e.exports=()=>{const e={},t={missedShots:[],hits:[],shipsSunk:0};return{board:(()=>{const e=[];for(let t=65;t<=74;t++)for(let r=1;r<=10;r++){let n=[String.fromCharCode(t),r];e.push(n)}return e})(),placeShip:(t,r)=>{if(t.getLength()!==r.length)return"incorrect placement";const n=t.getName();return e[n]=[],e[n][0]=t,e[n][1]=[...r],e},playerShips:e,receiveAttack:r=>{for(const n in e){let o=e[n][1];for(let s=0;s<o.length;s++)if(r.toString()===o[s].toString())return e[n][0].hit(),t.hits.push(r),e[n][0].isSunk()&&t.shipsSunk++,!0}return t.missedShots.push(r),!1},missedShots:()=>t.missedShots,hits:()=>t.hits,allShipsSunk:()=>{const r=Object.keys(e).length;return t.shipsSunk===r},shipsLeft:()=>5-t.shipsSunk}}},21:e=>{e.exports=function(e,t){return e=Math.ceil(e),t=Math.floor(t),Math.floor(Math.random()*(t-e+1)+e)}},507:(e,t,r)=>{const n=r(21);e.exports=e=>{let t=!0;const r=[],o=(e,t,r)=>{let n=!1;for(let r=0;r<t.length;r++)if(e.toString()===t[r].toString())return n;for(let t=0;t<r.length;t++)e.toString()===r[t].toString()&&(n=!0);return n},s=e=>{const t=e.length;return e[n(0,t-1)]};return{isTurn:()=>t,changeTurn:()=>{t=!t},makeAttack:(e,n,s)=>t?o(e,r,n)?(r.push(e),s(e)):"invalid coordinates":"not your turn",makeRandomAttack:e=>{if(t){let t=s(e);for(;!o(t,r,e);)t=s(e);return r.push(t),`attack made at ${t}`}return"not your turn"},name:e}}},643:e=>{e.exports=(e,t)=>{let r=0,n=!1;return{getLength:()=>t,getHits:()=>r,getName:()=>e,hit:()=>{r++},isSunk:()=>(n||t!==r||(n=!0),n)}}},281:e=>{e.exports={renderGameBoard:e=>{const t=document.createElement("div");t.classList.add("player-board");for(let r=0;r<e.length;r++){let n=document.createElement("div");n.textContent=`${e[r].toString()}`,t.appendChild(n)}const r=(e,t,r)=>{e.forEach((e=>{for(let n=0;n<t.length;n++){let o=t[n].textContent.split(",");o.splice(1,1,Number(o[1])),e.toString()===o.toString()&&(t[n].className=r)}}))};return{board:t,renderPlacements:(e,t)=>{for(ship in e){const n=e[ship][1];r(n,t,"placement")}},renderShots:(e,t,n)=>{r(e,n,"hit"),r(t,n,"missed")}}},renderScoreBoard:()=>({createScoreBoard:()=>{const e=document.createElement("p"),t=document.createElement("p"),r=document.createElement("div");return e.classList.add("player1"),t.classList.add("player2"),r.classList.add("scoreboard"),r.append(e,t),r},updateScore:(e,t)=>{const r=t;e.textContent=`ships left: ${r}`}})}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,r),s.exports}(()=>{const e=r(643),t=r(427),n=r(507),o=r(281),s=n(),a=t(),c=document.createElement("main"),i=o.renderGameBoard(a.board),l=o.renderScoreBoard(),p=l.createScoreBoard();c.append(p,i.board),document.body.appendChild(c),a.placeShip(e("patrol",2),[["B",3],["B",4]]),a.placeShip(e("submarine",3),[["E",8],["F",8],["G",8]]),a.placeShip(e("destroyer",3),[["C",6],["C",7],["C",8]]),a.placeShip(e("battleship",4),[["C",2],["D",2],["E",2],["F",2]]),a.placeShip(e("carrier",5),[["I",5],["I",6],["I",7],["I",8],["I",9]]);const d=document.querySelectorAll(".player-board div"),h=document.querySelector(".player1"),u=document.querySelector(".player2");i.renderPlacements(a.playerShips,d),l.updateScore(h,a.shipsLeft()),n().changeTurn();const S=t(),m=o.renderGameBoard(S.board);m.board.className="cpu-board",c.appendChild(m.board),S.placeShip(e("patrol",2),[["F",9],["G",9]]),S.placeShip(e("submarine",3),[["A",5],["A",6],["A",7]]),S.placeShip(e("destroyer",3),[["D",5],["E",5],["F",5]]),S.placeShip(e("battleship",4),[["H",1],["H",2],["H",3],["H",4]]),S.placeShip(e("carrier",5),[["J",6],["J",7],["J",8],["J",9],["J",10]]);const g=document.querySelectorAll(".cpu-board div");m.renderPlacements(S.playerShips,g),l.updateScore(u,S.shipsLeft()),g.forEach((e=>{e.addEventListener("click",(e=>{let t=e.currentTarget.textContent.split(",");t.splice(1,1,Number(t[1])),s.makeAttack(t,S.board,S.receiveAttack),m.renderShots(S.hits(),S.missedShots(),g),l.updateScore(u,S.shipsLeft()),console.log(S.missedShots()),console.log(S.hits())}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,