(()=>{var t={427:t=>{t.exports=()=>{const t={},e={missedShots:[],hits:[],shipsSunk:0};return{board:(()=>{const t=[];for(let e=65;e<=74;e++)for(let r=1;r<=10;r++){let n=[String.fromCharCode(e),r];t.push(n)}return t})(),placeShip:(e,r)=>{if(e.getLength()!==r.length)return"incorrect placement";const n=e.getName();return t[n]=[],t[n][0]=e,t[n][1]=[...r],t},playerShips:t,receiveAttack:r=>{for(const n in t){let o=t[n][1];for(let s=0;s<o.length;s++)if(r.toString()===o[s].toString())return t[n][0].hit(),e.hits.push(r),t[n][0].isSunk()&&e.shipsSunk++,!0}return e.missedShots.push(r),!1},missedShots:()=>e.missedShots,hits:()=>e.hits,allShipsSunk:()=>{const r=Object.keys(t).length;return e.shipsSunk===r}}}},21:t=>{t.exports=function(t,e){return t=Math.ceil(t),e=Math.floor(e),Math.floor(Math.random()*(e-t+1)+t)}},507:(t,e,r)=>{const n=r(21);t.exports=t=>{let e=!0;const r=[],o=(t,e,r)=>{let n=!1;for(let r=0;r<e.length;r++)if(t.toString()===e[r].toString())return n;for(let e=0;e<r.length;e++)t.toString()===r[e].toString()&&(n=!0);return n},s=t=>{const e=t.length;return t[n(0,e-1)]};return{isTurn:()=>e,changeTurn:()=>{e=!e},makeAttack:(t,n,s)=>e?o(t,r,n)?(r.push(t),s(t)):"invalid coordinates":"not your turn",makeRandomAttack:t=>{if(e){let e=s(t);for(;!o(e,r,t);)e=s(t);return r.push(e),`attack made at ${e}`}return"not your turn"},name:t}}},643:t=>{t.exports=(t,e)=>{let r=0,n=!1;return{getLength:()=>e,getHits:()=>r,getName:()=>t,hit:()=>{r++},isSunk:()=>(n||e!==r||(n=!0),n)}}},281:t=>{t.exports=t=>{const e=document.createElement("div");e.classList.add("player-board");for(let r=0;r<t.length;r++){let n=document.createElement("div");n.textContent=`${t[r].toString()}`,e.appendChild(n)}const r=(t,e,r)=>{t.forEach((t=>{for(let n=0;n<e.length;n++){let o=e[n].textContent.split(",");o.splice(1,1,Number(o[1])),t.toString()===o.toString()&&(e[n].className=r)}}))};return{board:e,renderPlacements:(t,e)=>{for(ship in t){const n=t[ship][1];r(n,e,"placement")}},renderShots:(t,e,n)=>{r(t,n,"hit"),r(e,n,"missed")}}}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={exports:{}};return t[n](s,s.exports,r),s.exports}(()=>{const t=r(643),e=r(427),n=r(507),o=r(281),s=n(),a=e(),i=document.createElement("main"),l=o(a.board);i.appendChild(l.board),document.body.appendChild(i),a.placeShip(t("patrol",2),[["B",3],["B",4]]),a.placeShip(t("submarine",3),[["E",8],["F",8],["G",8]]),a.placeShip(t("destroyer",3),[["C",6],["C",7],["C",8]]),a.placeShip(t("battleship",4),[["C",2],["D",2],["E",2],["F",2]]),a.placeShip(t("carrier",5),[["I",5],["I",6],["I",7],["I",8],["I",9]]);const c=document.querySelectorAll(".player-board div");l.renderPlacements(a.playerShips,c),n().changeTurn();const p=e(),h=o(p.board);h.board.className="cpu-board",i.appendChild(h.board),p.placeShip(t("patrol",2),[["F",9],["G",9]]),p.placeShip(t("submarine",3),[["A",5],["A",6],["A",7]]),p.placeShip(t("destroyer",3),[["D",5],["E",5],["F",5]]),p.placeShip(t("battleship",4),[["H",1],["H",2],["H",3],["H",4]]),p.placeShip(t("carrier",5),[["J",6],["J",7],["J",8],["J",9],["J",10]]);const d=document.querySelectorAll(".cpu-board div");h.renderPlacements(p.playerShips,d),d.forEach((t=>{t.addEventListener("click",(t=>{let e=t.currentTarget.textContent.split(",");e.splice(1,1,Number(e[1])),s.makeAttack(e,p.board,p.receiveAttack),h.renderShots(p.hits(),p.missedShots(),d),console.log(p.missedShots()),console.log(p.hits())}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,